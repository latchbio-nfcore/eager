import os
import shutil
import subprocess
import typing
from pathlib import Path

import requests
import typing_extensions
from flytekit.core.annotation import FlyteAnnotation
from latch.ldata.path import LPath
from latch.resources.tasks import custom_task, nextflow_runtime_task
from latch.resources.workflow import workflow
from latch.types import metadata
from latch.types.directory import LatchDir
from latch_cli.nextflow.utils import _get_execution_name
from latch_cli.nextflow.workflow import get_flag
from latch_cli.services.register.utils import import_module_by_path
from latch_cli.utils import urljoins

meta = Path("latch_metadata") / "__init__.py"
import_module_by_path(meta)


@custom_task(cpu=0.25, memory=0.5, storage_gib=1)
def initialize() -> str:
    token = os.environ.get("FLYTE_INTERNAL_EXECUTION_ID")
    if token is None:
        raise RuntimeError("failed to get execution token")

    headers = {"Authorization": f"Latch-Execution-Token {token}"}

    print("Provisioning shared storage volume... ", end="")
    resp = requests.post(
        "http://nf-dispatcher-service.flyte.svc.cluster.local/provision-storage",
        headers=headers,
        json={
            "storage_gib": 100,
        },
    )
    resp.raise_for_status()
    print("Done.")

    return resp.json()["name"]


@nextflow_runtime_task(cpu=4, memory=8, storage_gib=100)
def nextflow_runtime(
    pvc_name: str,
    input: str,
    single_stranded: typing.Optional[bool],
    single_end: typing.Optional[bool],
    bam: typing.Optional[bool],
    snpcapture_bed: typing.Optional[str],
    run_convertinputbam: typing.Optional[bool],
    fasta: typing.Optional[str],
    genome: typing.Optional[str],
    bwa_index: typing.Optional[str],
    bt2_index: typing.Optional[str],
    fasta_index: typing.Optional[str],
    seq_dict: typing.Optional[str],
    large_ref: typing.Optional[bool],
    save_reference: typing.Optional[bool],
    outdir: typing.Optional[
        typing_extensions.Annotated[LatchDir, FlyteAnnotation({"output": True})]
    ],
    email: typing.Optional[str],
    awsqueue: typing.Optional[str],
    awscli: typing.Optional[str],
    skip_fastqc: typing.Optional[bool],
    skip_adapterremoval: typing.Optional[bool],
    skip_preseq: typing.Optional[bool],
    skip_deduplication: typing.Optional[bool],
    skip_damage_calculation: typing.Optional[bool],
    skip_qualimap: typing.Optional[bool],
    complexity_filter_poly_g: typing.Optional[bool],
    clip_adapters_list: typing.Optional[str],
    skip_collapse: typing.Optional[bool],
    skip_trim: typing.Optional[bool],
    preserve5p: typing.Optional[bool],
    mergedonly: typing.Optional[bool],
    run_post_ar_trimming: typing.Optional[bool],
    circularfilter: typing.Optional[bool],
    hostremoval_input_fastq: typing.Optional[bool],
    run_bam_filtering: typing.Optional[bool],
    dedup_all_merged: typing.Optional[bool],
    run_pmdtools: typing.Optional[bool],
    pmdtools_reference_mask: typing.Optional[str],
    pmdtools_platypus: typing.Optional[bool],
    run_mapdamage_rescaling: typing.Optional[bool],
    run_bedtools_coverage: typing.Optional[bool],
    anno_file: typing.Optional[str],
    anno_file_is_unsorted: typing.Optional[bool],
    run_trim_bam: typing.Optional[bool],
    bamutils_softclip: typing.Optional[bool],
    run_genotyping: typing.Optional[bool],
    genotyping_tool: typing.Optional[str],
    gatk_dbsnp: typing.Optional[str],
    gatk_ug_keep_realign_bam: typing.Optional[bool],
    gatk_ug_defaultbasequalities: typing.Optional[str],
    pileupcaller_bedfile: typing.Optional[str],
    pileupcaller_snpfile: typing.Optional[str],
    angsd_createfasta: typing.Optional[bool],
    run_vcf2genome: typing.Optional[bool],
    vcf2genome_outfile: typing.Optional[str],
    vcf2genome_header: typing.Optional[str],
    run_multivcfanalyzer: typing.Optional[bool],
    write_allele_frequencies: typing.Optional[bool],
    additional_vcf_files: typing.Optional[str],
    run_mtnucratio: typing.Optional[bool],
    run_sexdeterrmine: typing.Optional[bool],
    sexdeterrmine_bedfile: typing.Optional[str],
    run_nuclear_contamination: typing.Optional[bool],
    metagenomic_complexity_filter: typing.Optional[bool],
    run_metagenomic_screening: typing.Optional[bool],
    metagenomic_tool: typing.Optional[str],
    database: typing.Optional[str],
    malt_sam_output: typing.Optional[bool],
    run_maltextract: typing.Optional[bool],
    maltextract_taxon_list: typing.Optional[str],
    maltextract_ncbifiles: typing.Optional[str],
    maltextract_destackingoff: typing.Optional[bool],
    maltextract_downsamplingoff: typing.Optional[bool],
    maltextract_duplicateremovaloff: typing.Optional[bool],
    maltextract_matches: typing.Optional[bool],
    maltextract_megansummary: typing.Optional[bool],
    maltextract_topalignment: typing.Optional[bool],
    udg_type: typing.Optional[str],
    colour_chemistry: typing.Optional[int],
    awsregion: typing.Optional[str],
    complexity_filter_poly_g_min: typing.Optional[int],
    clip_forward_adaptor: typing.Optional[str],
    clip_reverse_adaptor: typing.Optional[str],
    clip_readlength: typing.Optional[int],
    clip_min_read_quality: typing.Optional[int],
    min_adap_overlap: typing.Optional[int],
    qualitymax: typing.Optional[int],
    post_ar_trim_front: typing.Optional[int],
    post_ar_trim_tail: typing.Optional[int],
    post_ar_trim_front2: typing.Optional[int],
    post_ar_trim_tail2: typing.Optional[int],
    mapper: typing.Optional[str],
    bwaalnn: typing.Optional[float],
    bwaalnk: typing.Optional[int],
    bwaalnl: typing.Optional[int],
    bwaalno: typing.Optional[int],
    circularextension: typing.Optional[int],
    circulartarget: typing.Optional[str],
    bt2_alignmode: typing.Optional[str],
    bt2_sensitivity: typing.Optional[str],
    bt2n: typing.Optional[int],
    bt2l: typing.Optional[int],
    bt2_trim5: typing.Optional[int],
    bt2_trim3: typing.Optional[int],
    bt2_maxins: typing.Optional[int],
    hostremoval_mode: typing.Optional[str],
    bam_mapping_quality_threshold: typing.Optional[int],
    bam_filter_minreadlength: typing.Optional[int],
    bam_unmapped_type: typing.Optional[str],
    dedupper: typing.Optional[str],
    preseq_mode: typing.Optional[str],
    preseq_step_size: typing.Optional[int],
    preseq_maxextrap: typing.Optional[int],
    preseq_terms: typing.Optional[int],
    preseq_bootstrap: typing.Optional[int],
    preseq_cval: typing.Optional[float],
    damage_calculation_tool: typing.Optional[str],
    damageprofiler_length: typing.Optional[int],
    damageprofiler_threshold: typing.Optional[int],
    damageprofiler_yaxis: typing.Optional[float],
    mapdamage_downsample: typing.Optional[int],
    mapdamage_yaxis: typing.Optional[float],
    pmdtools_range: typing.Optional[int],
    pmdtools_threshold: typing.Optional[int],
    pmdtools_max_reads: typing.Optional[int],
    rescale_seqlength: typing.Optional[int],
    rescale_length_5p: typing.Optional[int],
    rescale_length_3p: typing.Optional[int],
    bamutils_clip_double_stranded_half_udg_left: typing.Optional[int],
    bamutils_clip_double_stranded_half_udg_right: typing.Optional[int],
    bamutils_clip_double_stranded_none_udg_left: typing.Optional[int],
    bamutils_clip_double_stranded_none_udg_right: typing.Optional[int],
    bamutils_clip_single_stranded_half_udg_left: typing.Optional[int],
    bamutils_clip_single_stranded_half_udg_right: typing.Optional[int],
    bamutils_clip_single_stranded_none_udg_left: typing.Optional[int],
    bamutils_clip_single_stranded_none_udg_right: typing.Optional[int],
    genotyping_source: typing.Optional[str],
    gatk_call_conf: typing.Optional[int],
    gatk_ploidy: typing.Optional[int],
    gatk_downsample: typing.Optional[int],
    gatk_hc_out_mode: typing.Optional[str],
    gatk_hc_emitrefconf: typing.Optional[str],
    gatk_ug_out_mode: typing.Optional[str],
    gatk_ug_genotype_model: typing.Optional[str],
    freebayes_C: typing.Optional[int],
    freebayes_g: typing.Optional[int],
    freebayes_p: typing.Optional[int],
    pileupcaller_method: typing.Optional[str],
    pileupcaller_transitions_mode: typing.Optional[str],
    pileupcaller_min_map_quality: typing.Optional[int],
    pileupcaller_min_base_quality: typing.Optional[int],
    angsd_glmodel: typing.Optional[str],
    angsd_glformat: typing.Optional[str],
    angsd_fastamethod: typing.Optional[str],
    run_bcftools_stats: typing.Optional[bool],
    vcf2genome_minc: typing.Optional[int],
    vcf2genome_minq: typing.Optional[int],
    vcf2genome_minfreq: typing.Optional[float],
    min_genotype_quality: typing.Optional[int],
    min_base_coverage: typing.Optional[int],
    min_allele_freq_hom: typing.Optional[float],
    min_allele_freq_het: typing.Optional[float],
    reference_gff_annotations: typing.Optional[str],
    reference_gff_exclude: typing.Optional[str],
    snp_eff_results: typing.Optional[str],
    mtnucratio_header: typing.Optional[str],
    contamination_chrom_name: typing.Optional[str],
    metagenomic_complexity_entropy: typing.Optional[float],
    metagenomic_min_support_reads: typing.Optional[int],
    percent_identity: typing.Optional[int],
    malt_mode: typing.Optional[str],
    malt_alignment_mode: typing.Optional[str],
    malt_top_percent: typing.Optional[int],
    malt_min_support_mode: typing.Optional[str],
    malt_min_support_percent: typing.Optional[float],
    malt_max_queries: typing.Optional[int],
    malt_memory_mode: typing.Optional[str],
    maltextract_filter: typing.Optional[str],
    maltextract_toppercent: typing.Optional[float],
    maltextract_percentidentity: typing.Optional[float],
) -> None:
    try:
        shared_dir = Path("/nf-workdir")

        ignore_list = [
            "latch",
            ".latch",
            "nextflow",
            ".nextflow",
            "work",
            "results",
            "miniconda",
            "anaconda3",
            "mambaforge",
        ]

        shutil.copytree(
            Path("/root"),
            shared_dir,
            ignore=lambda src, names: ignore_list,
            ignore_dangling_symlinks=True,
            dirs_exist_ok=True,
        )

        cmd = [
            "/root/nextflow",
            "run",
            str(shared_dir / "main.nf"),
            "-work-dir",
            str(shared_dir),
            "-profile",
            "docker",
            "-c",
            "latch.config",
            *get_flag("input", input),
            *get_flag("udg_type", udg_type),
            *get_flag("single_stranded", single_stranded),
            *get_flag("single_end", single_end),
            *get_flag("colour_chemistry", colour_chemistry),
            *get_flag("bam", bam),
            *get_flag("snpcapture_bed", snpcapture_bed),
            *get_flag("run_convertinputbam", run_convertinputbam),
            *get_flag("fasta", fasta),
            *get_flag("genome", genome),
            *get_flag("bwa_index", bwa_index),
            *get_flag("bt2_index", bt2_index),
            *get_flag("fasta_index", fasta_index),
            *get_flag("seq_dict", seq_dict),
            *get_flag("large_ref", large_ref),
            *get_flag("save_reference", save_reference),
            *get_flag("outdir", outdir),
            *get_flag("email", email),
            *get_flag("awsqueue", awsqueue),
            *get_flag("awsregion", awsregion),
            *get_flag("awscli", awscli),
            *get_flag("skip_fastqc", skip_fastqc),
            *get_flag("skip_adapterremoval", skip_adapterremoval),
            *get_flag("skip_preseq", skip_preseq),
            *get_flag("skip_deduplication", skip_deduplication),
            *get_flag("skip_damage_calculation", skip_damage_calculation),
            *get_flag("skip_qualimap", skip_qualimap),
            *get_flag("complexity_filter_poly_g", complexity_filter_poly_g),
            *get_flag("complexity_filter_poly_g_min", complexity_filter_poly_g_min),
            *get_flag("clip_forward_adaptor", clip_forward_adaptor),
            *get_flag("clip_reverse_adaptor", clip_reverse_adaptor),
            *get_flag("clip_adapters_list", clip_adapters_list),
            *get_flag("clip_readlength", clip_readlength),
            *get_flag("clip_min_read_quality", clip_min_read_quality),
            *get_flag("min_adap_overlap", min_adap_overlap),
            *get_flag("skip_collapse", skip_collapse),
            *get_flag("skip_trim", skip_trim),
            *get_flag("preserve5p", preserve5p),
            *get_flag("mergedonly", mergedonly),
            *get_flag("qualitymax", qualitymax),
            *get_flag("run_post_ar_trimming", run_post_ar_trimming),
            *get_flag("post_ar_trim_front", post_ar_trim_front),
            *get_flag("post_ar_trim_tail", post_ar_trim_tail),
            *get_flag("post_ar_trim_front2", post_ar_trim_front2),
            *get_flag("post_ar_trim_tail2", post_ar_trim_tail2),
            *get_flag("mapper", mapper),
            *get_flag("bwaalnn", bwaalnn),
            *get_flag("bwaalnk", bwaalnk),
            *get_flag("bwaalnl", bwaalnl),
            *get_flag("bwaalno", bwaalno),
            *get_flag("circularextension", circularextension),
            *get_flag("circulartarget", circulartarget),
            *get_flag("circularfilter", circularfilter),
            *get_flag("bt2_alignmode", bt2_alignmode),
            *get_flag("bt2_sensitivity", bt2_sensitivity),
            *get_flag("bt2n", bt2n),
            *get_flag("bt2l", bt2l),
            *get_flag("bt2_trim5", bt2_trim5),
            *get_flag("bt2_trim3", bt2_trim3),
            *get_flag("bt2_maxins", bt2_maxins),
            *get_flag("hostremoval_input_fastq", hostremoval_input_fastq),
            *get_flag("hostremoval_mode", hostremoval_mode),
            *get_flag("run_bam_filtering", run_bam_filtering),
            *get_flag("bam_mapping_quality_threshold", bam_mapping_quality_threshold),
            *get_flag("bam_filter_minreadlength", bam_filter_minreadlength),
            *get_flag("bam_unmapped_type", bam_unmapped_type),
            *get_flag("dedupper", dedupper),
            *get_flag("dedup_all_merged", dedup_all_merged),
            *get_flag("preseq_mode", preseq_mode),
            *get_flag("preseq_step_size", preseq_step_size),
            *get_flag("preseq_maxextrap", preseq_maxextrap),
            *get_flag("preseq_terms", preseq_terms),
            *get_flag("preseq_bootstrap", preseq_bootstrap),
            *get_flag("preseq_cval", preseq_cval),
            *get_flag("damage_calculation_tool", damage_calculation_tool),
            *get_flag("damageprofiler_length", damageprofiler_length),
            *get_flag("damageprofiler_threshold", damageprofiler_threshold),
            *get_flag("damageprofiler_yaxis", damageprofiler_yaxis),
            *get_flag("mapdamage_downsample", mapdamage_downsample),
            *get_flag("mapdamage_yaxis", mapdamage_yaxis),
            *get_flag("run_pmdtools", run_pmdtools),
            *get_flag("pmdtools_range", pmdtools_range),
            *get_flag("pmdtools_threshold", pmdtools_threshold),
            *get_flag("pmdtools_reference_mask", pmdtools_reference_mask),
            *get_flag("pmdtools_max_reads", pmdtools_max_reads),
            *get_flag("pmdtools_platypus", pmdtools_platypus),
            *get_flag("run_mapdamage_rescaling", run_mapdamage_rescaling),
            *get_flag("rescale_seqlength", rescale_seqlength),
            *get_flag("rescale_length_5p", rescale_length_5p),
            *get_flag("rescale_length_3p", rescale_length_3p),
            *get_flag("run_bedtools_coverage", run_bedtools_coverage),
            *get_flag("anno_file", anno_file),
            *get_flag("anno_file_is_unsorted", anno_file_is_unsorted),
            *get_flag("run_trim_bam", run_trim_bam),
            *get_flag(
                "bamutils_clip_double_stranded_half_udg_left",
                bamutils_clip_double_stranded_half_udg_left,
            ),
            *get_flag(
                "bamutils_clip_double_stranded_half_udg_right",
                bamutils_clip_double_stranded_half_udg_right,
            ),
            *get_flag(
                "bamutils_clip_double_stranded_none_udg_left",
                bamutils_clip_double_stranded_none_udg_left,
            ),
            *get_flag(
                "bamutils_clip_double_stranded_none_udg_right",
                bamutils_clip_double_stranded_none_udg_right,
            ),
            *get_flag(
                "bamutils_clip_single_stranded_half_udg_left",
                bamutils_clip_single_stranded_half_udg_left,
            ),
            *get_flag(
                "bamutils_clip_single_stranded_half_udg_right",
                bamutils_clip_single_stranded_half_udg_right,
            ),
            *get_flag(
                "bamutils_clip_single_stranded_none_udg_left",
                bamutils_clip_single_stranded_none_udg_left,
            ),
            *get_flag(
                "bamutils_clip_single_stranded_none_udg_right",
                bamutils_clip_single_stranded_none_udg_right,
            ),
            *get_flag("bamutils_softclip", bamutils_softclip),
            *get_flag("run_genotyping", run_genotyping),
            *get_flag("genotyping_tool", genotyping_tool),
            *get_flag("genotyping_source", genotyping_source),
            *get_flag("gatk_call_conf", gatk_call_conf),
            *get_flag("gatk_ploidy", gatk_ploidy),
            *get_flag("gatk_downsample", gatk_downsample),
            *get_flag("gatk_dbsnp", gatk_dbsnp),
            *get_flag("gatk_hc_out_mode", gatk_hc_out_mode),
            *get_flag("gatk_hc_emitrefconf", gatk_hc_emitrefconf),
            *get_flag("gatk_ug_out_mode", gatk_ug_out_mode),
            *get_flag("gatk_ug_genotype_model", gatk_ug_genotype_model),
            *get_flag("gatk_ug_keep_realign_bam", gatk_ug_keep_realign_bam),
            *get_flag("gatk_ug_defaultbasequalities", gatk_ug_defaultbasequalities),
            *get_flag("freebayes_C", freebayes_C),
            *get_flag("freebayes_g", freebayes_g),
            *get_flag("freebayes_p", freebayes_p),
            *get_flag("pileupcaller_bedfile", pileupcaller_bedfile),
            *get_flag("pileupcaller_snpfile", pileupcaller_snpfile),
            *get_flag("pileupcaller_method", pileupcaller_method),
            *get_flag("pileupcaller_transitions_mode", pileupcaller_transitions_mode),
            *get_flag("pileupcaller_min_map_quality", pileupcaller_min_map_quality),
            *get_flag("pileupcaller_min_base_quality", pileupcaller_min_base_quality),
            *get_flag("angsd_glmodel", angsd_glmodel),
            *get_flag("angsd_glformat", angsd_glformat),
            *get_flag("angsd_createfasta", angsd_createfasta),
            *get_flag("angsd_fastamethod", angsd_fastamethod),
            *get_flag("run_bcftools_stats", run_bcftools_stats),
            *get_flag("run_vcf2genome", run_vcf2genome),
            *get_flag("vcf2genome_outfile", vcf2genome_outfile),
            *get_flag("vcf2genome_header", vcf2genome_header),
            *get_flag("vcf2genome_minc", vcf2genome_minc),
            *get_flag("vcf2genome_minq", vcf2genome_minq),
            *get_flag("vcf2genome_minfreq", vcf2genome_minfreq),
            *get_flag("run_multivcfanalyzer", run_multivcfanalyzer),
            *get_flag("write_allele_frequencies", write_allele_frequencies),
            *get_flag("min_genotype_quality", min_genotype_quality),
            *get_flag("min_base_coverage", min_base_coverage),
            *get_flag("min_allele_freq_hom", min_allele_freq_hom),
            *get_flag("min_allele_freq_het", min_allele_freq_het),
            *get_flag("additional_vcf_files", additional_vcf_files),
            *get_flag("reference_gff_annotations", reference_gff_annotations),
            *get_flag("reference_gff_exclude", reference_gff_exclude),
            *get_flag("snp_eff_results", snp_eff_results),
            *get_flag("run_mtnucratio", run_mtnucratio),
            *get_flag("mtnucratio_header", mtnucratio_header),
            *get_flag("run_sexdeterrmine", run_sexdeterrmine),
            *get_flag("sexdeterrmine_bedfile", sexdeterrmine_bedfile),
            *get_flag("run_nuclear_contamination", run_nuclear_contamination),
            *get_flag("contamination_chrom_name", contamination_chrom_name),
            *get_flag("metagenomic_complexity_filter", metagenomic_complexity_filter),
            *get_flag("metagenomic_complexity_entropy", metagenomic_complexity_entropy),
            *get_flag("run_metagenomic_screening", run_metagenomic_screening),
            *get_flag("metagenomic_tool", metagenomic_tool),
            *get_flag("database", database),
            *get_flag("metagenomic_min_support_reads", metagenomic_min_support_reads),
            *get_flag("percent_identity", percent_identity),
            *get_flag("malt_mode", malt_mode),
            *get_flag("malt_alignment_mode", malt_alignment_mode),
            *get_flag("malt_top_percent", malt_top_percent),
            *get_flag("malt_min_support_mode", malt_min_support_mode),
            *get_flag("malt_min_support_percent", malt_min_support_percent),
            *get_flag("malt_max_queries", malt_max_queries),
            *get_flag("malt_memory_mode", malt_memory_mode),
            *get_flag("malt_sam_output", malt_sam_output),
            *get_flag("run_maltextract", run_maltextract),
            *get_flag("maltextract_taxon_list", maltextract_taxon_list),
            *get_flag("maltextract_ncbifiles", maltextract_ncbifiles),
            *get_flag("maltextract_filter", maltextract_filter),
            *get_flag("maltextract_toppercent", maltextract_toppercent),
            *get_flag("maltextract_destackingoff", maltextract_destackingoff),
            *get_flag("maltextract_downsamplingoff", maltextract_downsamplingoff),
            *get_flag(
                "maltextract_duplicateremovaloff", maltextract_duplicateremovaloff
            ),
            *get_flag("maltextract_matches", maltextract_matches),
            *get_flag("maltextract_megansummary", maltextract_megansummary),
            *get_flag("maltextract_percentidentity", maltextract_percentidentity),
            *get_flag("maltextract_topalignment", maltextract_topalignment),
        ]

        print("Launching Nextflow Runtime")
        print(" ".join(cmd))
        print(flush=True)

        env = {
            **os.environ,
            "NXF_HOME": "/root/.nextflow",
            "NXF_OPTS": "-Xms2048M -Xmx8G -XX:ActiveProcessorCount=4",
            "K8S_STORAGE_CLAIM_NAME": pvc_name,
            "NXF_DISABLE_CHECK_LATEST": "true",
        }
        subprocess.run(
            cmd,
            env=env,
            check=True,
            cwd=str(shared_dir),
        )
    finally:
        print()

        nextflow_log = shared_dir / ".nextflow.log"
        if nextflow_log.exists():
            name = _get_execution_name()
            if name is None:
                print("Skipping logs upload, failed to get execution name")
            else:
                remote = LPath(
                    urljoins(
                        "latch:///your_log_dir/nf_nf_core_eager", name, "nextflow.log"
                    )
                )
                print(f"Uploading .nextflow.log to {remote.path}")
                remote.upload_from(nextflow_log)


@workflow(metadata._nextflow_metadata)
def nf_nf_core_eager(
    input: str,
    single_stranded: typing.Optional[bool],
    single_end: typing.Optional[bool],
    bam: typing.Optional[bool],
    snpcapture_bed: typing.Optional[str],
    run_convertinputbam: typing.Optional[bool],
    fasta: typing.Optional[str],
    genome: typing.Optional[str],
    bwa_index: typing.Optional[str],
    bt2_index: typing.Optional[str],
    fasta_index: typing.Optional[str],
    seq_dict: typing.Optional[str],
    large_ref: typing.Optional[bool],
    save_reference: typing.Optional[bool],
    outdir: typing.Optional[
        typing_extensions.Annotated[LatchDir, FlyteAnnotation({"output": True})]
    ],
    email: typing.Optional[str],
    awsqueue: typing.Optional[str],
    awscli: typing.Optional[str],
    skip_fastqc: typing.Optional[bool],
    skip_adapterremoval: typing.Optional[bool],
    skip_preseq: typing.Optional[bool],
    skip_deduplication: typing.Optional[bool],
    skip_damage_calculation: typing.Optional[bool],
    skip_qualimap: typing.Optional[bool],
    complexity_filter_poly_g: typing.Optional[bool],
    clip_adapters_list: typing.Optional[str],
    skip_collapse: typing.Optional[bool],
    skip_trim: typing.Optional[bool],
    preserve5p: typing.Optional[bool],
    mergedonly: typing.Optional[bool],
    run_post_ar_trimming: typing.Optional[bool],
    circularfilter: typing.Optional[bool],
    hostremoval_input_fastq: typing.Optional[bool],
    run_bam_filtering: typing.Optional[bool],
    dedup_all_merged: typing.Optional[bool],
    run_pmdtools: typing.Optional[bool],
    pmdtools_reference_mask: typing.Optional[str],
    pmdtools_platypus: typing.Optional[bool],
    run_mapdamage_rescaling: typing.Optional[bool],
    run_bedtools_coverage: typing.Optional[bool],
    anno_file: typing.Optional[str],
    anno_file_is_unsorted: typing.Optional[bool],
    run_trim_bam: typing.Optional[bool],
    bamutils_softclip: typing.Optional[bool],
    run_genotyping: typing.Optional[bool],
    genotyping_tool: typing.Optional[str],
    gatk_dbsnp: typing.Optional[str],
    gatk_ug_keep_realign_bam: typing.Optional[bool],
    gatk_ug_defaultbasequalities: typing.Optional[str],
    pileupcaller_bedfile: typing.Optional[str],
    pileupcaller_snpfile: typing.Optional[str],
    angsd_createfasta: typing.Optional[bool],
    run_vcf2genome: typing.Optional[bool],
    vcf2genome_outfile: typing.Optional[str],
    vcf2genome_header: typing.Optional[str],
    run_multivcfanalyzer: typing.Optional[bool],
    write_allele_frequencies: typing.Optional[bool],
    additional_vcf_files: typing.Optional[str],
    run_mtnucratio: typing.Optional[bool],
    run_sexdeterrmine: typing.Optional[bool],
    sexdeterrmine_bedfile: typing.Optional[str],
    run_nuclear_contamination: typing.Optional[bool],
    metagenomic_complexity_filter: typing.Optional[bool],
    run_metagenomic_screening: typing.Optional[bool],
    metagenomic_tool: typing.Optional[str],
    database: typing.Optional[str],
    malt_sam_output: typing.Optional[bool],
    run_maltextract: typing.Optional[bool],
    maltextract_taxon_list: typing.Optional[str],
    maltextract_ncbifiles: typing.Optional[str],
    maltextract_destackingoff: typing.Optional[bool],
    maltextract_downsamplingoff: typing.Optional[bool],
    maltextract_duplicateremovaloff: typing.Optional[bool],
    maltextract_matches: typing.Optional[bool],
    maltextract_megansummary: typing.Optional[bool],
    maltextract_topalignment: typing.Optional[bool],
    udg_type: typing.Optional[str] = "none",
    colour_chemistry: typing.Optional[int] = 4,
    awsregion: typing.Optional[str] = "eu-west-1",
    complexity_filter_poly_g_min: typing.Optional[int] = 10,
    clip_forward_adaptor: typing.Optional[str] = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC",
    clip_reverse_adaptor: typing.Optional[str] = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTA",
    clip_readlength: typing.Optional[int] = 30,
    clip_min_read_quality: typing.Optional[int] = 20,
    min_adap_overlap: typing.Optional[int] = 1,
    qualitymax: typing.Optional[int] = 41,
    post_ar_trim_front: typing.Optional[int] = 7,
    post_ar_trim_tail: typing.Optional[int] = 7,
    post_ar_trim_front2: typing.Optional[int] = 7,
    post_ar_trim_tail2: typing.Optional[int] = 7,
    mapper: typing.Optional[str] = "bwaaln",
    bwaalnn: typing.Optional[float] = 0.01,
    bwaalnk: typing.Optional[int] = 2,
    bwaalnl: typing.Optional[int] = 1024,
    bwaalno: typing.Optional[int] = 2,
    circularextension: typing.Optional[int] = 500,
    circulartarget: typing.Optional[str] = "MT",
    bt2_alignmode: typing.Optional[str] = "local",
    bt2_sensitivity: typing.Optional[str] = "sensitive",
    bt2n: typing.Optional[int] = 0,
    bt2l: typing.Optional[int] = 0,
    bt2_trim5: typing.Optional[int] = 0,
    bt2_trim3: typing.Optional[int] = 0,
    bt2_maxins: typing.Optional[int] = 500,
    hostremoval_mode: typing.Optional[str] = "remove",
    bam_mapping_quality_threshold: typing.Optional[int] = 0,
    bam_filter_minreadlength: typing.Optional[int] = 0,
    bam_unmapped_type: typing.Optional[str] = "discard",
    dedupper: typing.Optional[str] = "markduplicates",
    preseq_mode: typing.Optional[str] = "c_curve",
    preseq_step_size: typing.Optional[int] = 1000,
    preseq_maxextrap: typing.Optional[int] = 10000000000,
    preseq_terms: typing.Optional[int] = 100,
    preseq_bootstrap: typing.Optional[int] = 100,
    preseq_cval: typing.Optional[float] = 0.95,
    damage_calculation_tool: typing.Optional[str] = "damageprofiler",
    damageprofiler_length: typing.Optional[int] = 100,
    damageprofiler_threshold: typing.Optional[int] = 15,
    damageprofiler_yaxis: typing.Optional[float] = 0.3,
    mapdamage_downsample: typing.Optional[int] = 0,
    mapdamage_yaxis: typing.Optional[float] = 0.3,
    pmdtools_range: typing.Optional[int] = 10,
    pmdtools_threshold: typing.Optional[int] = 3,
    pmdtools_max_reads: typing.Optional[int] = 10000,
    rescale_seqlength: typing.Optional[int] = 12,
    rescale_length_5p: typing.Optional[int] = 0,
    rescale_length_3p: typing.Optional[int] = 0,
    bamutils_clip_double_stranded_half_udg_left: typing.Optional[int] = 0,
    bamutils_clip_double_stranded_half_udg_right: typing.Optional[int] = 0,
    bamutils_clip_double_stranded_none_udg_left: typing.Optional[int] = 0,
    bamutils_clip_double_stranded_none_udg_right: typing.Optional[int] = 0,
    bamutils_clip_single_stranded_half_udg_left: typing.Optional[int] = 0,
    bamutils_clip_single_stranded_half_udg_right: typing.Optional[int] = 0,
    bamutils_clip_single_stranded_none_udg_left: typing.Optional[int] = 0,
    bamutils_clip_single_stranded_none_udg_right: typing.Optional[int] = 0,
    genotyping_source: typing.Optional[str] = "raw",
    gatk_call_conf: typing.Optional[int] = 30,
    gatk_ploidy: typing.Optional[int] = 2,
    gatk_downsample: typing.Optional[int] = 250,
    gatk_hc_out_mode: typing.Optional[str] = "EMIT_VARIANTS_ONLY",
    gatk_hc_emitrefconf: typing.Optional[str] = "GVCF",
    gatk_ug_out_mode: typing.Optional[str] = "EMIT_VARIANTS_ONLY",
    gatk_ug_genotype_model: typing.Optional[str] = "SNP",
    freebayes_C: typing.Optional[int] = 1,
    freebayes_g: typing.Optional[int] = 0,
    freebayes_p: typing.Optional[int] = 2,
    pileupcaller_method: typing.Optional[str] = "randomHaploid",
    pileupcaller_transitions_mode: typing.Optional[str] = "AllSites",
    pileupcaller_min_map_quality: typing.Optional[int] = 30,
    pileupcaller_min_base_quality: typing.Optional[int] = 30,
    angsd_glmodel: typing.Optional[str] = "samtools",
    angsd_glformat: typing.Optional[str] = "binary",
    angsd_fastamethod: typing.Optional[str] = "random",
    run_bcftools_stats: typing.Optional[bool] = True,
    vcf2genome_minc: typing.Optional[int] = 5,
    vcf2genome_minq: typing.Optional[int] = 30,
    vcf2genome_minfreq: typing.Optional[float] = 0.8,
    min_genotype_quality: typing.Optional[int] = 30,
    min_base_coverage: typing.Optional[int] = 5,
    min_allele_freq_hom: typing.Optional[float] = 0.9,
    min_allele_freq_het: typing.Optional[float] = 0.9,
    reference_gff_annotations: typing.Optional[str] = "NA",
    reference_gff_exclude: typing.Optional[str] = "NA",
    snp_eff_results: typing.Optional[str] = "NA",
    mtnucratio_header: typing.Optional[str] = "MT",
    contamination_chrom_name: typing.Optional[str] = "X",
    metagenomic_complexity_entropy: typing.Optional[float] = 0.3,
    metagenomic_min_support_reads: typing.Optional[int] = 1,
    percent_identity: typing.Optional[int] = 85,
    malt_mode: typing.Optional[str] = "BlastN",
    malt_alignment_mode: typing.Optional[str] = "SemiGlobal",
    malt_top_percent: typing.Optional[int] = 1,
    malt_min_support_mode: typing.Optional[str] = "percent",
    malt_min_support_percent: typing.Optional[float] = 0.01,
    malt_max_queries: typing.Optional[int] = 100,
    malt_memory_mode: typing.Optional[str] = "load",
    maltextract_filter: typing.Optional[str] = "def_anc",
    maltextract_toppercent: typing.Optional[float] = 0.01,
    maltextract_percentidentity: typing.Optional[float] = 85.0,
) -> None:
    """
    nf-core/eager

    Sample Description
    """

    pvc_name: str = initialize()
    nextflow_runtime(
        pvc_name=pvc_name,
        input=input,
        udg_type=udg_type,
        single_stranded=single_stranded,
        single_end=single_end,
        colour_chemistry=colour_chemistry,
        bam=bam,
        snpcapture_bed=snpcapture_bed,
        run_convertinputbam=run_convertinputbam,
        fasta=fasta,
        genome=genome,
        bwa_index=bwa_index,
        bt2_index=bt2_index,
        fasta_index=fasta_index,
        seq_dict=seq_dict,
        large_ref=large_ref,
        save_reference=save_reference,
        outdir=outdir,
        email=email,
        awsqueue=awsqueue,
        awsregion=awsregion,
        awscli=awscli,
        skip_fastqc=skip_fastqc,
        skip_adapterremoval=skip_adapterremoval,
        skip_preseq=skip_preseq,
        skip_deduplication=skip_deduplication,
        skip_damage_calculation=skip_damage_calculation,
        skip_qualimap=skip_qualimap,
        complexity_filter_poly_g=complexity_filter_poly_g,
        complexity_filter_poly_g_min=complexity_filter_poly_g_min,
        clip_forward_adaptor=clip_forward_adaptor,
        clip_reverse_adaptor=clip_reverse_adaptor,
        clip_adapters_list=clip_adapters_list,
        clip_readlength=clip_readlength,
        clip_min_read_quality=clip_min_read_quality,
        min_adap_overlap=min_adap_overlap,
        skip_collapse=skip_collapse,
        skip_trim=skip_trim,
        preserve5p=preserve5p,
        mergedonly=mergedonly,
        qualitymax=qualitymax,
        run_post_ar_trimming=run_post_ar_trimming,
        post_ar_trim_front=post_ar_trim_front,
        post_ar_trim_tail=post_ar_trim_tail,
        post_ar_trim_front2=post_ar_trim_front2,
        post_ar_trim_tail2=post_ar_trim_tail2,
        mapper=mapper,
        bwaalnn=bwaalnn,
        bwaalnk=bwaalnk,
        bwaalnl=bwaalnl,
        bwaalno=bwaalno,
        circularextension=circularextension,
        circulartarget=circulartarget,
        circularfilter=circularfilter,
        bt2_alignmode=bt2_alignmode,
        bt2_sensitivity=bt2_sensitivity,
        bt2n=bt2n,
        bt2l=bt2l,
        bt2_trim5=bt2_trim5,
        bt2_trim3=bt2_trim3,
        bt2_maxins=bt2_maxins,
        hostremoval_input_fastq=hostremoval_input_fastq,
        hostremoval_mode=hostremoval_mode,
        run_bam_filtering=run_bam_filtering,
        bam_mapping_quality_threshold=bam_mapping_quality_threshold,
        bam_filter_minreadlength=bam_filter_minreadlength,
        bam_unmapped_type=bam_unmapped_type,
        dedupper=dedupper,
        dedup_all_merged=dedup_all_merged,
        preseq_mode=preseq_mode,
        preseq_step_size=preseq_step_size,
        preseq_maxextrap=preseq_maxextrap,
        preseq_terms=preseq_terms,
        preseq_bootstrap=preseq_bootstrap,
        preseq_cval=preseq_cval,
        damage_calculation_tool=damage_calculation_tool,
        damageprofiler_length=damageprofiler_length,
        damageprofiler_threshold=damageprofiler_threshold,
        damageprofiler_yaxis=damageprofiler_yaxis,
        mapdamage_downsample=mapdamage_downsample,
        mapdamage_yaxis=mapdamage_yaxis,
        run_pmdtools=run_pmdtools,
        pmdtools_range=pmdtools_range,
        pmdtools_threshold=pmdtools_threshold,
        pmdtools_reference_mask=pmdtools_reference_mask,
        pmdtools_max_reads=pmdtools_max_reads,
        pmdtools_platypus=pmdtools_platypus,
        run_mapdamage_rescaling=run_mapdamage_rescaling,
        rescale_seqlength=rescale_seqlength,
        rescale_length_5p=rescale_length_5p,
        rescale_length_3p=rescale_length_3p,
        run_bedtools_coverage=run_bedtools_coverage,
        anno_file=anno_file,
        anno_file_is_unsorted=anno_file_is_unsorted,
        run_trim_bam=run_trim_bam,
        bamutils_clip_double_stranded_half_udg_left=bamutils_clip_double_stranded_half_udg_left,
        bamutils_clip_double_stranded_half_udg_right=bamutils_clip_double_stranded_half_udg_right,
        bamutils_clip_double_stranded_none_udg_left=bamutils_clip_double_stranded_none_udg_left,
        bamutils_clip_double_stranded_none_udg_right=bamutils_clip_double_stranded_none_udg_right,
        bamutils_clip_single_stranded_half_udg_left=bamutils_clip_single_stranded_half_udg_left,
        bamutils_clip_single_stranded_half_udg_right=bamutils_clip_single_stranded_half_udg_right,
        bamutils_clip_single_stranded_none_udg_left=bamutils_clip_single_stranded_none_udg_left,
        bamutils_clip_single_stranded_none_udg_right=bamutils_clip_single_stranded_none_udg_right,
        bamutils_softclip=bamutils_softclip,
        run_genotyping=run_genotyping,
        genotyping_tool=genotyping_tool,
        genotyping_source=genotyping_source,
        gatk_call_conf=gatk_call_conf,
        gatk_ploidy=gatk_ploidy,
        gatk_downsample=gatk_downsample,
        gatk_dbsnp=gatk_dbsnp,
        gatk_hc_out_mode=gatk_hc_out_mode,
        gatk_hc_emitrefconf=gatk_hc_emitrefconf,
        gatk_ug_out_mode=gatk_ug_out_mode,
        gatk_ug_genotype_model=gatk_ug_genotype_model,
        gatk_ug_keep_realign_bam=gatk_ug_keep_realign_bam,
        gatk_ug_defaultbasequalities=gatk_ug_defaultbasequalities,
        freebayes_C=freebayes_C,
        freebayes_g=freebayes_g,
        freebayes_p=freebayes_p,
        pileupcaller_bedfile=pileupcaller_bedfile,
        pileupcaller_snpfile=pileupcaller_snpfile,
        pileupcaller_method=pileupcaller_method,
        pileupcaller_transitions_mode=pileupcaller_transitions_mode,
        pileupcaller_min_map_quality=pileupcaller_min_map_quality,
        pileupcaller_min_base_quality=pileupcaller_min_base_quality,
        angsd_glmodel=angsd_glmodel,
        angsd_glformat=angsd_glformat,
        angsd_createfasta=angsd_createfasta,
        angsd_fastamethod=angsd_fastamethod,
        run_bcftools_stats=run_bcftools_stats,
        run_vcf2genome=run_vcf2genome,
        vcf2genome_outfile=vcf2genome_outfile,
        vcf2genome_header=vcf2genome_header,
        vcf2genome_minc=vcf2genome_minc,
        vcf2genome_minq=vcf2genome_minq,
        vcf2genome_minfreq=vcf2genome_minfreq,
        run_multivcfanalyzer=run_multivcfanalyzer,
        write_allele_frequencies=write_allele_frequencies,
        min_genotype_quality=min_genotype_quality,
        min_base_coverage=min_base_coverage,
        min_allele_freq_hom=min_allele_freq_hom,
        min_allele_freq_het=min_allele_freq_het,
        additional_vcf_files=additional_vcf_files,
        reference_gff_annotations=reference_gff_annotations,
        reference_gff_exclude=reference_gff_exclude,
        snp_eff_results=snp_eff_results,
        run_mtnucratio=run_mtnucratio,
        mtnucratio_header=mtnucratio_header,
        run_sexdeterrmine=run_sexdeterrmine,
        sexdeterrmine_bedfile=sexdeterrmine_bedfile,
        run_nuclear_contamination=run_nuclear_contamination,
        contamination_chrom_name=contamination_chrom_name,
        metagenomic_complexity_filter=metagenomic_complexity_filter,
        metagenomic_complexity_entropy=metagenomic_complexity_entropy,
        run_metagenomic_screening=run_metagenomic_screening,
        metagenomic_tool=metagenomic_tool,
        database=database,
        metagenomic_min_support_reads=metagenomic_min_support_reads,
        percent_identity=percent_identity,
        malt_mode=malt_mode,
        malt_alignment_mode=malt_alignment_mode,
        malt_top_percent=malt_top_percent,
        malt_min_support_mode=malt_min_support_mode,
        malt_min_support_percent=malt_min_support_percent,
        malt_max_queries=malt_max_queries,
        malt_memory_mode=malt_memory_mode,
        malt_sam_output=malt_sam_output,
        run_maltextract=run_maltextract,
        maltextract_taxon_list=maltextract_taxon_list,
        maltextract_ncbifiles=maltextract_ncbifiles,
        maltextract_filter=maltextract_filter,
        maltextract_toppercent=maltextract_toppercent,
        maltextract_destackingoff=maltextract_destackingoff,
        maltextract_downsamplingoff=maltextract_downsamplingoff,
        maltextract_duplicateremovaloff=maltextract_duplicateremovaloff,
        maltextract_matches=maltextract_matches,
        maltextract_megansummary=maltextract_megansummary,
        maltextract_percentidentity=maltextract_percentidentity,
        maltextract_topalignment=maltextract_topalignment,
    )
